#!/usr/bin/env python2

import json
import StringIO
import tarfile
from os.path import join
import ssdc_lib


if __name__ == "__main__":
    from argparse import ArgumentParser

    parser = ArgumentParser(
        prog=__file__,
        description="Clusters files based on their ssdeep hash",
        version="%(prog)s v" + ssdc_lib.get_version() + " by Brian Wallace (@botnet_hunter)",
        epilog="%(prog)s v" + ssdc_lib.get_version() + " by Brian Wallace (@botnet_hunter)"
    )
    parser.add_argument('path', metavar='path', type=str, nargs='+', help="Paths to files or directories to scan")
    parser.add_argument('-r', '--recursive', default=False, required=False, action='store_true',
                        help="Scan paths recursively")
    parser.add_argument('-o', '--output', metavar='output', type=str, nargs='?', default="output.tar",
                        help="Path to write the resulting tarball to (default=output.tar)")
    parser.add_argument('-s', '--storefiles', default=False, required=False, action='store_true',
                        help="Store files in output tar")
    parser.add_argument('-d', '--dontcompute', default=False, required=False, action='store_true',
                        help="Treat input as ssDeep hashes")

    args = parser.parse_args()

    if args.dontcompute and args.storefiles:
        print "Unfortunately, we can't store files which are not provided as input, arguments are conflicting"
        import sys

        sys.exit(1)

    root_path = args.path
    recursive = args.recursive
    dontcompute = args.dontcompute

    groups, hashes, scores, sha256s = ssdc_lib.ssdeep_cluster(
        root_path, recursive, dontcompute, calculate_sha256=True, should_print=True)

    # Copy files to zipfile
    with tarfile.TarFile(args.output, mode='a') as mytar:
        if args.storefiles:
            for group in xrange(len(groups)):
                for path in groups[group]:
                    mytar.add(path, arcname=join(str(group), sha256s[path]))

        gexf_tar_file = StringIO.StringIO()
        gexf_tar_file.write(ssdc_lib.generate_gexf(scores))
        gexf_tar_file.seek(0)
        info = tarfile.TarInfo(name="file_distance.gexf")
        info.size = len(gexf_tar_file.buf)
        mytar.addfile(tarinfo=info, fileobj=gexf_tar_file)

        json_tar_file = StringIO.StringIO()
        json_tar_file.write(json.dumps({"groups": groups, "hashes": hashes}))
        json_tar_file.seek(0)
        info = tarfile.TarInfo(name="groups.json")
        info.size = len(json_tar_file.buf)
        mytar.addfile(tarinfo=info, fileobj=json_tar_file)

    print "{0} files organized into {1} groups".format(len(hashes), len(groups))
    print "Groups distribution:"
    for group in xrange(len(groups)):
        print "Group {0} has {1} files".format(group, len(groups[group]))
